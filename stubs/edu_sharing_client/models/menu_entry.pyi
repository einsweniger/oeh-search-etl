from typing import Any, Optional

class MenuEntry:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, position: Optional[Any] = ..., icon: Optional[Any] = ..., name: Optional[Any] = ..., url: Optional[Any] = ..., is_disabled: bool = ..., is_seperate: bool = ..., is_seperate_bottom: bool = ..., only_desktop: bool = ..., path: Optional[Any] = ..., scope: Optional[Any] = ...) -> None: ...
    @property
    def position(self): ...
    @position.setter
    def position(self, position: Any) -> None: ...
    @property
    def icon(self): ...
    @icon.setter
    def icon(self, icon: Any) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name: Any) -> None: ...
    @property
    def url(self): ...
    @url.setter
    def url(self, url: Any) -> None: ...
    @property
    def is_disabled(self): ...
    @is_disabled.setter
    def is_disabled(self, is_disabled: Any) -> None: ...
    @property
    def is_seperate(self): ...
    @is_seperate.setter
    def is_seperate(self, is_seperate: Any) -> None: ...
    @property
    def is_seperate_bottom(self): ...
    @is_seperate_bottom.setter
    def is_seperate_bottom(self, is_seperate_bottom: Any) -> None: ...
    @property
    def only_desktop(self): ...
    @only_desktop.setter
    def only_desktop(self, only_desktop: Any) -> None: ...
    @property
    def path(self): ...
    @path.setter
    def path(self, path: Any) -> None: ...
    @property
    def scope(self): ...
    @scope.setter
    def scope(self, scope: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
