from typing import Any, Optional

class JobDetail:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, name: Optional[Any] = ..., group: Optional[Any] = ..., description: Optional[Any] = ..., job_data_map: Optional[Any] = ..., key: Optional[Any] = ..., volatile: bool = ..., full_name: Optional[Any] = ..., stateful: bool = ..., durable: bool = ..., job_listener_names: Optional[Any] = ...) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name: Any) -> None: ...
    @property
    def group(self): ...
    @group.setter
    def group(self, group: Any) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, description: Any) -> None: ...
    @property
    def job_data_map(self): ...
    @job_data_map.setter
    def job_data_map(self, job_data_map: Any) -> None: ...
    @property
    def key(self): ...
    @key.setter
    def key(self, key: Any) -> None: ...
    @property
    def volatile(self): ...
    @volatile.setter
    def volatile(self, volatile: Any) -> None: ...
    @property
    def full_name(self): ...
    @full_name.setter
    def full_name(self, full_name: Any) -> None: ...
    @property
    def stateful(self): ...
    @stateful.setter
    def stateful(self, stateful: Any) -> None: ...
    @property
    def durable(self): ...
    @durable.setter
    def durable(self, durable: Any) -> None: ...
    @property
    def job_listener_names(self): ...
    @job_listener_names.setter
    def job_listener_names(self, job_listener_names: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
