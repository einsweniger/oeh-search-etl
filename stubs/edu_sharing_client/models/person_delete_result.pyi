from typing import Any, Optional

class PersonDeleteResult:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, authority_name: Optional[Any] = ..., deleted_name: Optional[Any] = ..., home_folder: Optional[Any] = ..., shared_folders: Optional[Any] = ..., collections: Optional[Any] = ..., comments: Optional[Any] = ..., ratings: Optional[Any] = ..., collection_feedback: Optional[Any] = ..., stream: Optional[Any] = ...) -> None: ...
    @property
    def authority_name(self): ...
    @authority_name.setter
    def authority_name(self, authority_name: Any) -> None: ...
    @property
    def deleted_name(self): ...
    @deleted_name.setter
    def deleted_name(self, deleted_name: Any) -> None: ...
    @property
    def home_folder(self): ...
    @home_folder.setter
    def home_folder(self, home_folder: Any) -> None: ...
    @property
    def shared_folders(self): ...
    @shared_folders.setter
    def shared_folders(self, shared_folders: Any) -> None: ...
    @property
    def collections(self): ...
    @collections.setter
    def collections(self, collections: Any) -> None: ...
    @property
    def comments(self): ...
    @comments.setter
    def comments(self, comments: Any) -> None: ...
    @property
    def ratings(self): ...
    @ratings.setter
    def ratings(self, ratings: Any) -> None: ...
    @property
    def collection_feedback(self): ...
    @collection_feedback.setter
    def collection_feedback(self, collection_feedback: Any) -> None: ...
    @property
    def stream(self): ...
    @stream.setter
    def stream(self, stream: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
