from typing import Any, Optional

class Login:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, remote_authentications: Optional[Any] = ..., is_valid_login: bool = ..., is_admin: bool = ..., current_scope: Optional[Any] = ..., user_home: Optional[Any] = ..., session_timeout: Optional[Any] = ..., tool_permissions: Optional[Any] = ..., status_code: Optional[Any] = ..., authority_name: Optional[Any] = ..., is_guest: bool = ...) -> None: ...
    @property
    def remote_authentications(self): ...
    @remote_authentications.setter
    def remote_authentications(self, remote_authentications: Any) -> None: ...
    @property
    def is_valid_login(self): ...
    @is_valid_login.setter
    def is_valid_login(self, is_valid_login: Any) -> None: ...
    @property
    def is_admin(self): ...
    @is_admin.setter
    def is_admin(self, is_admin: Any) -> None: ...
    @property
    def current_scope(self): ...
    @current_scope.setter
    def current_scope(self, current_scope: Any) -> None: ...
    @property
    def user_home(self): ...
    @user_home.setter
    def user_home(self, user_home: Any) -> None: ...
    @property
    def session_timeout(self): ...
    @session_timeout.setter
    def session_timeout(self, session_timeout: Any) -> None: ...
    @property
    def tool_permissions(self): ...
    @tool_permissions.setter
    def tool_permissions(self, tool_permissions: Any) -> None: ...
    @property
    def status_code(self): ...
    @status_code.setter
    def status_code(self, status_code: Any) -> None: ...
    @property
    def authority_name(self): ...
    @authority_name.setter
    def authority_name(self, authority_name: Any) -> None: ...
    @property
    def is_guest(self): ...
    @is_guest.setter
    def is_guest(self, is_guest: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
