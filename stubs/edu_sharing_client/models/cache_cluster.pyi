from typing import Any, Optional

class CacheCluster:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, instances: Optional[Any] = ..., cache_infos: Optional[Any] = ..., local_member: Optional[Any] = ..., free_memory: Optional[Any] = ..., total_memory: Optional[Any] = ..., max_memory: Optional[Any] = ..., available_processors: Optional[Any] = ..., time_stamp: Optional[Any] = ..., group_name: Optional[Any] = ...) -> None: ...
    @property
    def instances(self): ...
    @instances.setter
    def instances(self, instances: Any) -> None: ...
    @property
    def cache_infos(self): ...
    @cache_infos.setter
    def cache_infos(self, cache_infos: Any) -> None: ...
    @property
    def local_member(self): ...
    @local_member.setter
    def local_member(self, local_member: Any) -> None: ...
    @property
    def free_memory(self): ...
    @free_memory.setter
    def free_memory(self, free_memory: Any) -> None: ...
    @property
    def total_memory(self): ...
    @total_memory.setter
    def total_memory(self, total_memory: Any) -> None: ...
    @property
    def max_memory(self): ...
    @max_memory.setter
    def max_memory(self, max_memory: Any) -> None: ...
    @property
    def available_processors(self): ...
    @available_processors.setter
    def available_processors(self, available_processors: Any) -> None: ...
    @property
    def time_stamp(self): ...
    @time_stamp.setter
    def time_stamp(self, time_stamp: Any) -> None: ...
    @property
    def group_name(self): ...
    @group_name.setter
    def group_name(self, group_name: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
