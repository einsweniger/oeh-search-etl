from typing import Any, Optional

class Application:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, id: Optional[Any] = ..., title: Optional[Any] = ..., webserver_url: Optional[Any] = ..., client_base_url: Optional[Any] = ..., type: Optional[Any] = ..., subtype: Optional[Any] = ..., repository_type: Optional[Any] = ..., xml: Optional[Any] = ..., file: Optional[Any] = ..., content_url: Optional[Any] = ..., config_url: Optional[Any] = ...) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, id: Any) -> None: ...
    @property
    def title(self): ...
    @title.setter
    def title(self, title: Any) -> None: ...
    @property
    def webserver_url(self): ...
    @webserver_url.setter
    def webserver_url(self, webserver_url: Any) -> None: ...
    @property
    def client_base_url(self): ...
    @client_base_url.setter
    def client_base_url(self, client_base_url: Any) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type: Any) -> None: ...
    @property
    def subtype(self): ...
    @subtype.setter
    def subtype(self, subtype: Any) -> None: ...
    @property
    def repository_type(self): ...
    @repository_type.setter
    def repository_type(self, repository_type: Any) -> None: ...
    @property
    def xml(self): ...
    @xml.setter
    def xml(self, xml: Any) -> None: ...
    @property
    def file(self): ...
    @file.setter
    def file(self, file: Any) -> None: ...
    @property
    def content_url(self): ...
    @content_url.setter
    def content_url(self, content_url: Any) -> None: ...
    @property
    def config_url(self): ...
    @config_url.setter
    def config_url(self, config_url: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
