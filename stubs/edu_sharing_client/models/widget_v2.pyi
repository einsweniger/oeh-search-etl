from typing import Any, Optional

class WidgetV2:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, link: Optional[Any] = ..., subwidgets: Optional[Any] = ..., condition: Optional[Any] = ..., id: Optional[Any] = ..., caption: Optional[Any] = ..., bottom_caption: Optional[Any] = ..., icon: Optional[Any] = ..., type: Optional[Any] = ..., template: Optional[Any] = ..., has_values: bool = ..., values: Optional[Any] = ..., placeholder: Optional[Any] = ..., unit: Optional[Any] = ..., min: Optional[Any] = ..., max: Optional[Any] = ..., default_min: Optional[Any] = ..., default_max: Optional[Any] = ..., step: Optional[Any] = ..., allowempty: bool = ..., defaultvalue: Optional[Any] = ..., is_extended: bool = ..., is_required: bool = ..., is_searchable: bool = ...) -> None: ...
    @property
    def link(self): ...
    @link.setter
    def link(self, link: Any) -> None: ...
    @property
    def subwidgets(self): ...
    @subwidgets.setter
    def subwidgets(self, subwidgets: Any) -> None: ...
    @property
    def condition(self): ...
    @condition.setter
    def condition(self, condition: Any) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, id: Any) -> None: ...
    @property
    def caption(self): ...
    @caption.setter
    def caption(self, caption: Any) -> None: ...
    @property
    def bottom_caption(self): ...
    @bottom_caption.setter
    def bottom_caption(self, bottom_caption: Any) -> None: ...
    @property
    def icon(self): ...
    @icon.setter
    def icon(self, icon: Any) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type: Any) -> None: ...
    @property
    def template(self): ...
    @template.setter
    def template(self, template: Any) -> None: ...
    @property
    def has_values(self): ...
    @has_values.setter
    def has_values(self, has_values: Any) -> None: ...
    @property
    def values(self): ...
    @values.setter
    def values(self, values: Any) -> None: ...
    @property
    def placeholder(self): ...
    @placeholder.setter
    def placeholder(self, placeholder: Any) -> None: ...
    @property
    def unit(self): ...
    @unit.setter
    def unit(self, unit: Any) -> None: ...
    @property
    def min(self): ...
    @min.setter
    def min(self, min: Any) -> None: ...
    @property
    def max(self): ...
    @max.setter
    def max(self, max: Any) -> None: ...
    @property
    def default_min(self): ...
    @default_min.setter
    def default_min(self, default_min: Any) -> None: ...
    @property
    def default_max(self): ...
    @default_max.setter
    def default_max(self, default_max: Any) -> None: ...
    @property
    def step(self): ...
    @step.setter
    def step(self, step: Any) -> None: ...
    @property
    def allowempty(self): ...
    @allowempty.setter
    def allowempty(self, allowempty: Any) -> None: ...
    @property
    def defaultvalue(self): ...
    @defaultvalue.setter
    def defaultvalue(self, defaultvalue: Any) -> None: ...
    @property
    def is_extended(self): ...
    @is_extended.setter
    def is_extended(self, is_extended: Any) -> None: ...
    @property
    def is_required(self): ...
    @is_required.setter
    def is_required(self, is_required: Any) -> None: ...
    @property
    def is_searchable(self): ...
    @is_searchable.setter
    def is_searchable(self, is_searchable: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
