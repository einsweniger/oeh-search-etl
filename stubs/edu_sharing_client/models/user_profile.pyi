from typing import Any, Optional

class UserProfile:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, primary_affiliation: Optional[Any] = ..., skills: Optional[Any] = ..., types: Optional[Any] = ..., first_name: Optional[Any] = ..., last_name: Optional[Any] = ..., email: Optional[Any] = ..., avatar: Optional[Any] = ..., about: Optional[Any] = ...) -> None: ...
    @property
    def primary_affiliation(self): ...
    @primary_affiliation.setter
    def primary_affiliation(self, primary_affiliation: Any) -> None: ...
    @property
    def skills(self): ...
    @skills.setter
    def skills(self, skills: Any) -> None: ...
    @property
    def types(self): ...
    @types.setter
    def types(self, types: Any) -> None: ...
    @property
    def first_name(self): ...
    @first_name.setter
    def first_name(self, first_name: Any) -> None: ...
    @property
    def last_name(self): ...
    @last_name.setter
    def last_name(self, last_name: Any) -> None: ...
    @property
    def email(self): ...
    @email.setter
    def email(self, email: Any) -> None: ...
    @property
    def avatar(self): ...
    @avatar.setter
    def avatar(self, avatar: Any) -> None: ...
    @property
    def about(self): ...
    @about.setter
    def about(self, about: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
