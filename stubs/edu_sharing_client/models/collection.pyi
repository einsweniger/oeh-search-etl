from typing import Any, Optional

class Collection:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, scope: Optional[Any] = ..., author_freetext: Optional[Any] = ..., level0: bool = ..., title: Optional[Any] = ..., description: Optional[Any] = ..., type: Optional[Any] = ..., viewtype: Optional[Any] = ..., order_mode: Optional[Any] = ..., x: Optional[Any] = ..., y: Optional[Any] = ..., z: Optional[Any] = ..., color: Optional[Any] = ..., from_user: bool = ..., pinned: bool = ..., child_collections_count: Optional[Any] = ..., child_references_count: Optional[Any] = ...) -> None: ...
    @property
    def scope(self): ...
    @scope.setter
    def scope(self, scope: Any) -> None: ...
    @property
    def author_freetext(self): ...
    @author_freetext.setter
    def author_freetext(self, author_freetext: Any) -> None: ...
    @property
    def level0(self): ...
    @level0.setter
    def level0(self, level0: Any) -> None: ...
    @property
    def title(self): ...
    @title.setter
    def title(self, title: Any) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, description: Any) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type: Any) -> None: ...
    @property
    def viewtype(self): ...
    @viewtype.setter
    def viewtype(self, viewtype: Any) -> None: ...
    @property
    def order_mode(self): ...
    @order_mode.setter
    def order_mode(self, order_mode: Any) -> None: ...
    @property
    def x(self): ...
    @x.setter
    def x(self, x: Any) -> None: ...
    @property
    def y(self): ...
    @y.setter
    def y(self, y: Any) -> None: ...
    @property
    def z(self): ...
    @z.setter
    def z(self, z: Any) -> None: ...
    @property
    def color(self): ...
    @color.setter
    def color(self, color: Any) -> None: ...
    @property
    def from_user(self): ...
    @from_user.setter
    def from_user(self, from_user: Any) -> None: ...
    @property
    def pinned(self): ...
    @pinned.setter
    def pinned(self, pinned: Any) -> None: ...
    @property
    def child_collections_count(self): ...
    @child_collections_count.setter
    def child_collections_count(self, child_collections_count: Any) -> None: ...
    @property
    def child_references_count(self): ...
    @child_references_count.setter
    def child_references_count(self, child_references_count: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
