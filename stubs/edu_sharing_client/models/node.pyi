from typing import Any, Optional

class Node:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, remote: Optional[Any] = ..., content: Optional[Any] = ..., license: Optional[Any] = ..., is_directory: bool = ..., comment_count: Optional[Any] = ..., rating: Optional[Any] = ..., ref: Optional[Any] = ..., parent: Optional[Any] = ..., type: Optional[Any] = ..., aspects: Optional[Any] = ..., name: Optional[Any] = ..., title: Optional[Any] = ..., metadataset: Optional[Any] = ..., repository_type: Optional[Any] = ..., created_at: Optional[Any] = ..., created_by: Optional[Any] = ..., modified_at: Optional[Any] = ..., modified_by: Optional[Any] = ..., access: Optional[Any] = ..., download_url: Optional[Any] = ..., properties: Optional[Any] = ..., mimetype: Optional[Any] = ..., mediatype: Optional[Any] = ..., size: Optional[Any] = ..., preview: Optional[Any] = ..., icon_url: Optional[Any] = ..., collection: Optional[Any] = ..., owner: Optional[Any] = ...) -> None: ...
    @property
    def remote(self): ...
    @remote.setter
    def remote(self, remote: Any) -> None: ...
    @property
    def content(self): ...
    @content.setter
    def content(self, content: Any) -> None: ...
    @property
    def license(self): ...
    @license.setter
    def license(self, license: Any) -> None: ...
    @property
    def is_directory(self): ...
    @is_directory.setter
    def is_directory(self, is_directory: Any) -> None: ...
    @property
    def comment_count(self): ...
    @comment_count.setter
    def comment_count(self, comment_count: Any) -> None: ...
    @property
    def rating(self): ...
    @rating.setter
    def rating(self, rating: Any) -> None: ...
    @property
    def ref(self): ...
    @ref.setter
    def ref(self, ref: Any) -> None: ...
    @property
    def parent(self): ...
    @parent.setter
    def parent(self, parent: Any) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type: Any) -> None: ...
    @property
    def aspects(self): ...
    @aspects.setter
    def aspects(self, aspects: Any) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name: Any) -> None: ...
    @property
    def title(self): ...
    @title.setter
    def title(self, title: Any) -> None: ...
    @property
    def metadataset(self): ...
    @metadataset.setter
    def metadataset(self, metadataset: Any) -> None: ...
    @property
    def repository_type(self): ...
    @repository_type.setter
    def repository_type(self, repository_type: Any) -> None: ...
    @property
    def created_at(self): ...
    @created_at.setter
    def created_at(self, created_at: Any) -> None: ...
    @property
    def created_by(self): ...
    @created_by.setter
    def created_by(self, created_by: Any) -> None: ...
    @property
    def modified_at(self): ...
    @modified_at.setter
    def modified_at(self, modified_at: Any) -> None: ...
    @property
    def modified_by(self): ...
    @modified_by.setter
    def modified_by(self, modified_by: Any) -> None: ...
    @property
    def access(self): ...
    @access.setter
    def access(self, access: Any) -> None: ...
    @property
    def download_url(self): ...
    @download_url.setter
    def download_url(self, download_url: Any) -> None: ...
    @property
    def properties(self): ...
    @properties.setter
    def properties(self, properties: Any) -> None: ...
    @property
    def mimetype(self): ...
    @mimetype.setter
    def mimetype(self, mimetype: Any) -> None: ...
    @property
    def mediatype(self): ...
    @mediatype.setter
    def mediatype(self, mediatype: Any) -> None: ...
    @property
    def size(self): ...
    @size.setter
    def size(self, size: Any) -> None: ...
    @property
    def preview(self): ...
    @preview.setter
    def preview(self, preview: Any) -> None: ...
    @property
    def icon_url(self): ...
    @icon_url.setter
    def icon_url(self, icon_url: Any) -> None: ...
    @property
    def collection(self): ...
    @collection.setter
    def collection(self, collection: Any) -> None: ...
    @property
    def owner(self): ...
    @owner.setter
    def owner(self, owner: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
