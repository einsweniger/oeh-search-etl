from typing import Any, Optional

class CacheInfo:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, size: Optional[Any] = ..., statistic_hits: Optional[Any] = ..., name: Optional[Any] = ..., backup_count: Optional[Any] = ..., backup_entry_count: Optional[Any] = ..., backup_entry_memory_cost: Optional[Any] = ..., heap_cost: Optional[Any] = ..., owned_entry_count: Optional[Any] = ..., get_owned_entry_memory_cost: Optional[Any] = ..., size_in_memory: Optional[Any] = ..., member: Optional[Any] = ..., group_name: Optional[Any] = ..., max_size: Optional[Any] = ...) -> None: ...
    @property
    def size(self): ...
    @size.setter
    def size(self, size: Any) -> None: ...
    @property
    def statistic_hits(self): ...
    @statistic_hits.setter
    def statistic_hits(self, statistic_hits: Any) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name: Any) -> None: ...
    @property
    def backup_count(self): ...
    @backup_count.setter
    def backup_count(self, backup_count: Any) -> None: ...
    @property
    def backup_entry_count(self): ...
    @backup_entry_count.setter
    def backup_entry_count(self, backup_entry_count: Any) -> None: ...
    @property
    def backup_entry_memory_cost(self): ...
    @backup_entry_memory_cost.setter
    def backup_entry_memory_cost(self, backup_entry_memory_cost: Any) -> None: ...
    @property
    def heap_cost(self): ...
    @heap_cost.setter
    def heap_cost(self, heap_cost: Any) -> None: ...
    @property
    def owned_entry_count(self): ...
    @owned_entry_count.setter
    def owned_entry_count(self, owned_entry_count: Any) -> None: ...
    @property
    def get_owned_entry_memory_cost(self): ...
    @get_owned_entry_memory_cost.setter
    def get_owned_entry_memory_cost(self, get_owned_entry_memory_cost: Any) -> None: ...
    @property
    def size_in_memory(self): ...
    @size_in_memory.setter
    def size_in_memory(self, size_in_memory: Any) -> None: ...
    @property
    def member(self): ...
    @member.setter
    def member(self, member: Any) -> None: ...
    @property
    def group_name(self): ...
    @group_name.setter
    def group_name(self, group_name: Any) -> None: ...
    @property
    def max_size(self): ...
    @max_size.setter
    def max_size(self, max_size: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
