from typing import Any, Optional

class Connector:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, id: Optional[Any] = ..., icon: Optional[Any] = ..., show_new: bool = ..., parameters: Optional[Any] = ..., filetypes: Optional[Any] = ..., only_desktop: bool = ..., has_view_mode: bool = ...) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, id: Any) -> None: ...
    @property
    def icon(self): ...
    @icon.setter
    def icon(self, icon: Any) -> None: ...
    @property
    def show_new(self): ...
    @show_new.setter
    def show_new(self, show_new: Any) -> None: ...
    @property
    def parameters(self): ...
    @parameters.setter
    def parameters(self, parameters: Any) -> None: ...
    @property
    def filetypes(self): ...
    @filetypes.setter
    def filetypes(self, filetypes: Any) -> None: ...
    @property
    def only_desktop(self): ...
    @only_desktop.setter
    def only_desktop(self, only_desktop: Any) -> None: ...
    @property
    def has_view_mode(self): ...
    @has_view_mode.setter
    def has_view_mode(self, has_view_mode: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
