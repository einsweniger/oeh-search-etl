from typing import Any, Optional

class TrackingNode:
    swagger_types: Any = ...
    attribute_map: Any = ...
    discriminator: Any = ...
    def __init__(self, counts: Optional[Any] = ..., _date: Optional[Any] = ..., authority: Optional[Any] = ..., fields: Optional[Any] = ..., groups: Optional[Any] = ..., node: Optional[Any] = ...) -> None: ...
    @property
    def counts(self): ...
    @counts.setter
    def counts(self, counts: Any) -> None: ...
    @property
    def authority(self): ...
    @authority.setter
    def authority(self, authority: Any) -> None: ...
    @property
    def fields(self): ...
    @fields.setter
    def fields(self, fields: Any) -> None: ...
    @property
    def groups(self): ...
    @groups.setter
    def groups(self, groups: Any) -> None: ...
    @property
    def node(self): ...
    @node.setter
    def node(self, node: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
