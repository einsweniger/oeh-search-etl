from typing import Any

class TypeWithDefault(type):
    def __init__(cls, name: Any, bases: Any, dct: Any) -> None: ...
    def __call__(cls): ...
    def set_default(cls, default: Any) -> None: ...

class Configuration(metaclass=TypeWithDefault):
    host: str = ...
    temp_folder_path: Any = ...
    api_key: Any = ...
    api_key_prefix: Any = ...
    refresh_api_key_hook: Any = ...
    username: str = ...
    password: str = ...
    logger: Any = ...
    logger_stream_handler: Any = ...
    logger_file_handler: Any = ...
    verify_ssl: bool = ...
    ssl_ca_cert: Any = ...
    cert_file: Any = ...
    key_file: Any = ...
    assert_hostname: Any = ...
    connection_pool_maxsize: Any = ...
    proxy: Any = ...
    safe_chars_for_path_param: str = ...
    def __init__(self) -> None: ...
    @property
    def logger_file(self): ...
    @logger_file.setter
    def logger_file(self, value: Any) -> None: ...
    @property
    def debug(self): ...
    @debug.setter
    def debug(self, value: Any) -> None: ...
    @property
    def logger_format(self): ...
    logger_formatter: Any = ...
    @logger_format.setter
    def logger_format(self, value: Any) -> None: ...
    def get_api_key_with_prefix(self, identifier: Any): ...
    def get_basic_auth_token(self): ...
    def auth_settings(self): ...
    def to_debug_report(self): ...
