from abc import ABCMeta
from collections.abc import MutableMapping
from scrapy.utils.deprecate import ScrapyDeprecationWarning as ScrapyDeprecationWarning
from scrapy.utils.trackref import object_ref as object_ref
from typing import Any

class _BaseItem(object_ref): ...

class _BaseItemMeta(ABCMeta):
    def __instancecheck__(cls, instance: Any): ...

class BaseItem(_BaseItem, metaclass=_BaseItemMeta):
    def __new__(cls, *args: Any, **kwargs: Any): ...

class Field(dict): ...

class ItemMeta(_BaseItemMeta):
    def __new__(mcs: Any, class_name: Any, bases: Any, attrs: Any): ...

class DictItem(MutableMapping, BaseItem):
    fields: Any = ...
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __getattr__(self, name: Any) -> None: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    __hash__: Any = ...
    def keys(self): ...
    def copy(self): ...
    def deepcopy(self): ...

class Item(DictItem, metaclass=ItemMeta): ...
