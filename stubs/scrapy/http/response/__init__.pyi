from scrapy.exceptions import NotSupported as NotSupported
from scrapy.http.common import obsolete_setter as obsolete_setter
from scrapy.http.headers import Headers as Headers
from scrapy.http.request import Request as Request
from scrapy.link import Link as Link
from scrapy.utils.trackref import object_ref as object_ref
from typing import Any, Generator, Optional

class Response(object_ref):
    headers: Any = ...
    status: Any = ...
    request: Any = ...
    flags: Any = ...
    certificate: Any = ...
    ip_address: Any = ...
    def __init__(self, url: Any, status: int = ..., headers: Optional[Any] = ..., body: bytes = ..., flags: Optional[Any] = ..., request: Optional[Any] = ..., certificate: Optional[Any] = ..., ip_address: Optional[Any] = ...) -> None: ...
    @property
    def cb_kwargs(self): ...
    @property
    def meta(self): ...
    url: Any = ...
    body: Any = ...
    def copy(self): ...
    def replace(self, *args: Any, **kwargs: Any): ...
    def urljoin(self, url: Any): ...
    @property
    def text(self) -> None: ...
    def css(self, *a: Any, **kw: Any) -> None: ...
    def xpath(self, *a: Any, **kw: Any) -> None: ...
    def follow(self, url: Any, callback: Any=..., method: Any=..., headers: Any=..., body: Any=..., cookies: Any=..., meta: Any=..., encoding: Any=..., priority: Any=..., dont_filter: Any=..., errback: Any=..., cb_kwargs: Any=..., flags: Any=...) -> Request: ...
    def follow_all(self, urls: Any, callback: Any=..., method: Any=..., headers: Any=..., body: Any=..., cookies: Any=..., meta: Any=..., encoding: Any=..., priority: Any=..., dont_filter: Any=..., errback: Any=..., cb_kwargs: Any=..., flags: Any=...) -> Generator[Request, None, None]: ...
