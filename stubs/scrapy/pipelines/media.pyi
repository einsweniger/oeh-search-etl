from scrapy.settings import Settings as Settings
from scrapy.utils.datatypes import SequenceExclude as SequenceExclude
from scrapy.utils.defer import defer_result as defer_result, mustbe_deferred as mustbe_deferred
from scrapy.utils.deprecate import ScrapyDeprecationWarning as ScrapyDeprecationWarning
from scrapy.utils.log import failure_to_exc_info as failure_to_exc_info
from scrapy.utils.misc import arg_to_iter as arg_to_iter
from scrapy.utils.request import request_fingerprint as request_fingerprint
from typing import Any, Optional

logger: Any

class MediaPipeline:
    LOG_FAILED_RESULTS: bool = ...
    class SpiderInfo:
        spider: Any = ...
        downloading: Any = ...
        downloaded: Any = ...
        waiting: Any = ...
        def __init__(self, spider: Any) -> None: ...
    download_func: Any = ...
    allow_redirects: Any = ...
    def __init__(self, download_func: Optional[Any] = ..., settings: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_crawler(cls, crawler: Any): ...
    spiderinfo: Any = ...
    def open_spider(self, spider: Any) -> None: ...
    def process_item(self, item: Any, spider: Any): ...
    def media_to_download(self, request: Any, info: Any, *, item: Optional[Any] = ...) -> None: ...
    def get_media_requests(self, item: Any, info: Any) -> None: ...
    def media_downloaded(self, response: Any, request: Any, info: Any, *, item: Optional[Any] = ...): ...
    def media_failed(self, failure: Any, request: Any, info: Any): ...
    def item_completed(self, results: Any, item: Any, info: Any): ...
    def file_path(self, request: Any, response: Optional[Any] = ..., info: Optional[Any] = ..., *, item: Optional[Any] = ...) -> None: ...
