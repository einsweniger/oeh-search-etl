from scrapy.exceptions import IgnoreRequest as IgnoreRequest, NotConfigured as NotConfigured
from scrapy.http import Request as Request
from scrapy.pipelines.media import MediaPipeline as MediaPipeline
from scrapy.settings import Settings as Settings
from scrapy.utils.boto import is_botocore_available as is_botocore_available
from scrapy.utils.datatypes import CaselessDict as CaselessDict
from scrapy.utils.ftp import ftp_store_file as ftp_store_file
from scrapy.utils.log import failure_to_exc_info as failure_to_exc_info
from scrapy.utils.misc import md5sum as md5sum
from scrapy.utils.python import to_bytes as to_bytes
from scrapy.utils.request import referer_str as referer_str
from typing import Any, Optional

logger: Any

class FileException(Exception): ...

class FSFilesStore:
    basedir: Any = ...
    created_directories: Any = ...
    def __init__(self, basedir: Any) -> None: ...
    def persist_file(self, path: Any, buf: Any, info: Any, meta: Optional[Any] = ..., headers: Optional[Any] = ...) -> None: ...
    def stat_file(self, path: Any, info: Any): ...

class S3FilesStore:
    AWS_ACCESS_KEY_ID: Any = ...
    AWS_SECRET_ACCESS_KEY: Any = ...
    AWS_ENDPOINT_URL: Any = ...
    AWS_REGION_NAME: Any = ...
    AWS_USE_SSL: Any = ...
    AWS_VERIFY: Any = ...
    POLICY: str = ...
    HEADERS: Any = ...
    s3_client: Any = ...
    def __init__(self, uri: Any) -> None: ...
    def stat_file(self, path: Any, info: Any): ...
    def persist_file(self, path: Any, buf: Any, info: Any, meta: Optional[Any] = ..., headers: Optional[Any] = ...): ...

class GCSFilesStore:
    GCS_PROJECT_ID: Any = ...
    CACHE_CONTROL: str = ...
    POLICY: Any = ...
    bucket: Any = ...
    prefix: Any = ...
    def __init__(self, uri: Any) -> None: ...
    def stat_file(self, path: Any, info: Any): ...
    def persist_file(self, path: Any, buf: Any, info: Any, meta: Optional[Any] = ..., headers: Optional[Any] = ...): ...

class FTPFilesStore:
    FTP_USERNAME: Any = ...
    FTP_PASSWORD: Any = ...
    USE_ACTIVE_MODE: Any = ...
    port: Any = ...
    host: Any = ...
    username: Any = ...
    password: Any = ...
    basedir: Any = ...
    def __init__(self, uri: Any) -> None: ...
    def persist_file(self, path: Any, buf: Any, info: Any, meta: Optional[Any] = ..., headers: Optional[Any] = ...): ...
    def stat_file(self, path: Any, info: Any): ...

class FilesPipeline(MediaPipeline):
    MEDIA_NAME: str = ...
    EXPIRES: int = ...
    STORE_SCHEMES: Any = ...
    DEFAULT_FILES_URLS_FIELD: str = ...
    DEFAULT_FILES_RESULT_FIELD: str = ...
    store: Any = ...
    expires: Any = ...
    FILES_URLS_FIELD: Any = ...
    FILES_RESULT_FIELD: Any = ...
    files_urls_field: Any = ...
    files_result_field: Any = ...
    def __init__(self, store_uri: Any, download_func: Optional[Any] = ..., settings: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_settings(cls, settings: Any): ...
    def media_to_download(self, request: Any, info: Any, *, item: Optional[Any] = ...): ...
    def media_failed(self, failure: Any, request: Any, info: Any) -> None: ...
    def media_downloaded(self, response: Any, request: Any, info: Any, *, item: Optional[Any] = ...): ...
    def inc_stats(self, spider: Any, status: Any) -> None: ...
    def get_media_requests(self, item: Any, info: Any): ...
    def file_downloaded(self, response: Any, request: Any, info: Any, *, item: Optional[Any] = ...): ...
    def item_completed(self, results: Any, item: Any, info: Any): ...
    def file_path(self, request: Any, response: Optional[Any] = ..., info: Optional[Any] = ..., *, item: Optional[Any] = ...): ...
