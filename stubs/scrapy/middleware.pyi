from scrapy.exceptions import NotConfigured as NotConfigured
from scrapy.utils.defer import process_chain as process_chain, process_chain_both as process_chain_both, process_parallel as process_parallel
from scrapy.utils.misc import create_instance as create_instance, load_object as load_object
from typing import Any, Optional

logger: Any

class MiddlewareManager:
    component_name: str = ...
    middlewares: Any = ...
    methods: Any = ...
    def __init__(self, *middlewares: Any) -> None: ...
    @classmethod
    def from_settings(cls, settings: Any, crawler: Optional[Any] = ...): ...
    @classmethod
    def from_crawler(cls, crawler: Any): ...
    def open_spider(self, spider: Any): ...
    def close_spider(self, spider: Any): ...
