from scrapy import signals as signals
from scrapy.exceptions import NotConfigured as NotConfigured
from scrapy.utils.decorators import defers as defers
from scrapy.utils.engine import print_engine_status as print_engine_status
from scrapy.utils.reactor import listen_tcp as listen_tcp
from scrapy.utils.trackref import print_live_refs as print_live_refs
from twisted.internet import protocol
from typing import Any

TWISTED_CONCH_AVAILABLE: bool
logger: Any
update_telnet_vars: Any

class TelnetConsole(protocol.ServerFactory):
    crawler: Any = ...
    noisy: bool = ...
    portrange: Any = ...
    host: Any = ...
    username: Any = ...
    password: Any = ...
    def __init__(self, crawler: Any) -> None: ...
    @classmethod
    def from_crawler(cls, crawler: Any): ...
    port: Any = ...
    def start_listening(self) -> None: ...
    def stop_listening(self) -> None: ...
    def protocol(self): ...
