from scrapy.http import Headers as Headers
from scrapy.responsetypes import responsetypes as responsetypes
from scrapy.utils.httpobj import urlparse_cached as urlparse_cached
from scrapy.utils.python import to_bytes as to_bytes
from twisted.internet.protocol import ClientFactory
from twisted.web.http import HTTPClient
from typing import Any

class ScrapyHTTPPageGetter(HTTPClient):
    delimiter: bytes = ...
    headers: Any = ...
    def connectionMade(self) -> None: ...
    def lineReceived(self, line: Any): ...
    def handleHeader(self, key: Any, value: Any) -> None: ...
    def handleStatus(self, version: Any, status: Any, message: Any) -> None: ...
    def handleEndHeaders(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def handleResponse(self, response: Any) -> None: ...
    def timeout(self) -> None: ...

class ScrapyHTTPClientFactory(ClientFactory):
    protocol: Any = ...
    waiting: int = ...
    noisy: bool = ...
    followRedirect: bool = ...
    afterFoundGet: bool = ...
    url: Any = ...
    method: Any = ...
    body: Any = ...
    headers: Any = ...
    response_headers: Any = ...
    timeout: Any = ...
    start_time: Any = ...
    deferred: Any = ...
    def __init__(self, request: Any, timeout: int = ...) -> None: ...
    def buildProtocol(self, addr: Any): ...
    headers_time: Any = ...
    def gotHeaders(self, headers: Any) -> None: ...
    def gotStatus(self, version: Any, status: Any, message: Any) -> None: ...
    def page(self, page: Any) -> None: ...
    def noPage(self, reason: Any) -> None: ...
    def clientConnectionFailed(self, _: Any, reason: Any) -> None: ...
