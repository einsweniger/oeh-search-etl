from scrapy.utils.datatypes import LocalCache as LocalCache
from twisted.internet.base import ThreadedResolver
from typing import Any, Optional

dnscache: Any

class CachingThreadedResolver(ThreadedResolver):
    timeout: Any = ...
    def __init__(self, reactor: Any, cache_size: Any, timeout: Any) -> None: ...
    @classmethod
    def from_crawler(cls, crawler: Any, reactor: Any): ...
    def install_on_reactor(self) -> None: ...
    def getHostByName(self, name: Any, timeout: Optional[Any] = ...): ...

class HostResolution:
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def cancel(self) -> None: ...

class _CachingResolutionReceiver:
    resolutionReceiver: Any = ...
    hostName: Any = ...
    addresses: Any = ...
    def __init__(self, resolutionReceiver: Any, hostName: Any) -> None: ...
    resolution: Any = ...
    def resolutionBegan(self, resolution: Any) -> None: ...
    def addressResolved(self, address: Any) -> None: ...
    def resolutionComplete(self) -> None: ...

class CachingHostnameResolver:
    reactor: Any = ...
    original_resolver: Any = ...
    def __init__(self, reactor: Any, cache_size: Any) -> None: ...
    @classmethod
    def from_crawler(cls, crawler: Any, reactor: Any): ...
    def install_on_reactor(self) -> None: ...
    def resolveHostName(self, resolutionReceiver: Any, hostName: Any, portNumber: int = ..., addressTypes: Optional[Any] = ..., transportSemantics: str = ...): ...
