import collections
import weakref
from typing import Any, Optional

class CaselessDict(dict):
    def __init__(self, seq: Optional[Any] = ...) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __contains__(self, key: Any): ...
    has_key: Any = ...
    def __copy__(self): ...
    copy: Any = ...
    def normkey(self, key: Any): ...
    def normvalue(self, value: Any): ...
    def get(self, key: Any, def_val: Optional[Any] = ...): ...
    def setdefault(self, key: Any, def_val: Optional[Any] = ...): ...
    def update(self, seq: Any) -> None: ...
    @classmethod
    def fromkeys(cls, keys: Any, value: Optional[Any] = ...): ...
    def pop(self, key: Any, *args: Any): ...

class LocalCache(collections.OrderedDict):
    limit: Any = ...
    def __init__(self, limit: Optional[Any] = ...) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...

class LocalWeakReferencedCache(weakref.WeakKeyDictionary):
    data: Any = ...
    def __init__(self, limit: Optional[Any] = ...) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __getitem__(self, key: Any): ...

class SequenceExclude:
    seq: Any = ...
    def __init__(self, seq: Any) -> None: ...
    def __contains__(self, item: Any): ...
